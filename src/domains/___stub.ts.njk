import { {% for interface in importInterfaces(operations) -%}{{ interface }},{%- endfor %} } from '@/http/nodegen/interfaces';
{% set domainClassName = ucFirst(operation_name) + 'Domain' %}
{% set domainInterfaceName = ucFirst(operation_name) + 'DomainInterface' %}
import { {{domainInterfaceName}} } from '@/http/nodegen/domainInterfaces/{{domainInterfaceName}}';
{% if pathMethodsHaveAttr(operations, 'security', 'jwtToken') %}import {JwtAccess} from '@/http/nodegen/interfaces/JwtAccess';{% endif %}
{% if pathMethodsHaveAttr(operations, 'x-passRequest') %}import NodegenRequest from '../http/interfaces/NodegenRequest';{% endif %}
{% if mockServer %}import {{ ucFirst(operation_name) }}DomainMock from './__mocks__/{{ ucFirst(operation_name) }}DomainMock'{% endif %}

class {{ domainClassName }} implements {{ domainInterfaceName }} {
  {% for op in operations -%}
    {% for method, path in op.path -%}
      {% if isValidMethod(method) %}
  /**
   * Operation ID: {{ path.operationId }}
   * Summary: {{ path.summary if path.summary else 'No summary provided' }}
   * Description: {{ path.description | trim if path.description else 'No description provided' }}
   * Pre-domain Async Validators used: {{ path['x-async-validators'] | dump if path['x-async-validators'] else 'None used' }}
   */
  {%- set singleSuccessResponse = getSingleSuccessResponse(path['x-response-definitions']) %}
  public async {{ path.operationId }} ({{ pathParamsToDomainParams(method, path, true, false, 'params') }}): Promise<{{ path['x-response-definitions'][singleSuccessResponse] if singleSuccessResponse else 'any' }}> {
    {% if mockServer %}
    return {{ ucFirst(operation_name) }}DomainMock.{{ path.operationId }}({{ pathParamsToDomainParams(method, path, false, undefined, 'params') }});
    {% else %}
    return {};
    {% endif %}
  }
      {% endif %}
    {%- endfor %}
  {%- endfor %}
}

export default new {{ domainClassName }}();
